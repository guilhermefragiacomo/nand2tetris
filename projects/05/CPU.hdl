// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

	Mux16(a[15]=false, a[0..14]=instruction[0..14], b=aluOutput, sel=instruction[15], out=instructionMux);
    
    Not(in=instruction[15], out=not15);
    Or(a=instruction[5], b=not15, out=instruction5Or15);
    ARegister(in=instructionMux, load=instruction5Or15, out=Aregister, out[0..14]=addressM);
    
    And(a=instruction[4], b=instruction[15], out=and415);
    DRegister(in=aluOutput, load=and415, out=Dregister);

    Mux16(a=Aregister, b=inM, sel=instruction[12], out=inRegisterAMux);
    
    ALU(x=Dregister, y=inRegisterAMux, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOutput, out=outM, zr=zeroOutput, ng=ngOutput);

    Comparator(in=aluOutput, ltz=ltz, eqz=eqz, gtz=gtz);
    And(a=gtz, b=instruction[0], out=jgtz);
    And(a=eqz, b=instruction[1], out=jeqz);
    And(a=ltz, b=instruction[2], out=jltz);
    Or(a=jltz, b=jeqz, out=jltzOreqz);
    Or(a=jltzOreqz, b=jgtz, out=jump);
    And(a=instruction[15], b=jump, out=load);
    Not(in=load, out=inc);

    PC(in=Aregister, reset=reset, load=load, inc=inc, out[0..14]=pc);

    And(a=instruction[15], b=instruction[3], out=writeM);
    

}